# Supported and current values of the ini file:
[global]
# The directory where the IO500 runs
datadir = /mnt/kapok
# The data directory is suffixed by a timestamp. Useful for running several IO500 tests concurrently.
timestamp-datadir = TRUE
# The result directory.
resultdir = /root/io500-isc21/io500/results
# The result directory is suffixed by a timestamp. Useful for running several IO500 tests concurrently.
timestamp-resultdir = TRUE
# The general API for the tests (to create/delete the datadir, extra options will be passed to IOR/mdtest)
api = POSIX
# Purge the caches, this is useful for testing and needed for single node runs
drop-caches = TRUE
# Cache purging command, invoked before each I/O phase
drop-caches-cmd = sudo -n bash -c "echo 2 > /proc/sys/vm/drop_caches"
# Allocate the I/O buffers on the GPU
io-buffers-on-gpu = FALSE
# The verbosity level between 1 and 10
verbosity = 1
# Use the rules for the Student Cluster Competition
scc = FALSE

[debug]
# For a valid result, the stonewall timer must be set to the value according to the rules, it can be smaller for testing
stonewall-time = 300

[ior-easy]
# The API to be used
API = POSIX --posix.odirect
# Transfer size
transferSize = 4m
# Block size; must be a multiple of transferSize
blockSize = 104800m
# Create one file per process
filePerProc = TRUE
# Use unique directory per file per process
uniqueDir = FALSE
# Run this phase
run = TRUE
# The verbosity level
verbosity = 

[ior-easy-write]
# The API to be used
API = POSIX --posix.odirect

[mdtest-easy]
# The API to be used
API = POSIX
# Files per proc
n = 1500000
# Run this phase
run = TRUE

[mdtest-easy-write]
# The API to be used
API = POSIX
# Run this phase
run = TRUE

[timestamp]

[ior-hard]
# The API to be used
API = POSIX
# Number of segments
segmentCount = 1500000
# Collective operation (for supported backends)
collective = 
# Run this phase
run = TRUE
# The verbosity level
verbosity = 

[ior-hard-write]
# The API to be used
API = POSIX
# Collective operation (for supported backends)
collective = 

[mdtest-hard]
# The API to be used
API = POSIX
# Files per proc
n = 1000000
# File limit per directory (MDTest -I flag) to overcome file system limitations 
files-per-dir = 
# Run this phase
run = TRUE

[mdtest-hard-write]
# The API to be used
API = POSIX
# Run this phase
run = TRUE

[find]
# Set to an external script to perform the find phase
external-script = /root/io500-isc21/io500/bin/llfs-pfind.sh
# Startup arguments for external scripts, some MPI's may not support this!
external-mpi-args = 
# Extra arguments for the external scripts
external-extra-args = 
# Set the number of processes for pfind/the external script
nproc = 1
# Run this phase
run = TRUE
# Pfind queue length
pfind-queue-length = 10000
# Pfind Steal from next
pfind-steal-next = FALSE
# Parallelize the readdir by using hashing. Your system must support this!
pfind-parallelize-single-dir-access-using-hashing = FALSE
